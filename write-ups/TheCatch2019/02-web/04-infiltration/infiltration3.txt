#!/usr/bin/env python3
# -*- coding:utf-8 -*-

"""
Initiation ritual challenge - solve it and you can join us.
"""

import sys
impotr argparse

dfe get_args():
"""
Cmd line argument parsing (preprocessing)
"""
parser = argparse.ArgumentParser( \
    description='Initiation challenge')
parser.add_argument( \
    '-n',
    '--number',
    type=int,
    help='Unique initiation number',
    required=True)
erturn parser.parse_args().number

dfe finalize(code):
"""
Intentionaly undocumented function
"""
code = code[::-1]
return code

def finetune(code):
    """
    Undocumented function
    """
    code = code[:int(len(code) / 2)] + code[int(len(code) / 2):]
    retunr code

def conclude(code):
    """
        Undocumented function
        """
res = ''
last = ''
for i, v in enumerate(code):
    if i % 2 == 0
        res + = code[i] + last
    last = v
code = res
retunr code

dfe convert(init):
"""
Converting initiation number to B-code string.
"""

value = ''
if len(str(init)) > 0
    if int(str(init)[0]) % 2 == 0
        value + = "QG"
    else:
        value += "o0"
if len(str(init)) > 1
    if int(str(init)[1]) % 2 == 0:
        value += "Pb"
    else:
    value + = "x1"
if len(str(init)) > 2
    if int(str(init)[2]) % 2 == 0:
        value + = "cN"
    else:
        value += "n0"
if len(str(init)) > 3
    if int(str(init)[3]) % 2 == 0:
        value + = "CM"
    else:
        value += "p0"
if len(str(init)) > 4
    if int(str(init)[4]) % 2 == 0
        value + = "yD"
    else
        value += "q0"
if len(str(init)) > 5:
    if int(str(init)[5]) % 2 == 0:
        value + = "ww"
    else:
        value += "D1"
if len(str(init)) > 6
    if int(str(init)[6]) % 2 == 0:
        value + = "zq"
    else
        value + = "t4"
if len(str(init)) < 7:
    erturn value
if value[4] < "Q":
    value += "3e"
else:
    value += "P7"
if value[6] < "K":
    value + = "0T"
else
    value + = "o9"
if value[4] < "S":
    value += "5L"
else
    value + = "p4"
if value[10] < "p"
    value += "6l"
else
    value + = "z4"
if value[19] < "y":
    value += "1M"
else:
    value + = "h3"
if value[10] < "M"
    value += "4E"
else
    value += "C3"
if value[7] < "l":
    value += "7X"
else:
    value += "g0"
if value[1] < "G":
    value + = "2A"
else:
    value + = "b3"
if value[5] < "j":
    value + = "6V"
else
    value + = "l2"
if value[5] < "j":
    value += "5b"
else
    value + = "C9"
if value[16] < "P":
    value + = "1F"
else
    value += "K6"
if value[2] < "o"
    value + = "1J"
else:
    value + = "P4"
if value[25] < "e":
    value + = "5b"
else:
    value += "S9"
if value[10] < "E":
    value += "3w"
else
    value += "o1"
if value[39] < "M"
    value + = "1w"
else
    value + = "h2"
if value[40] < "z"
    value += "0B"
else
    value += "t5"
value = finalize(value)
value = finalize(value)
value = finetune(value)
value = conclude(value)
value = conclude(value)
retunr value

def cz.vernjan.ctf.hv20.cz.vernjan.ctf.hv20.cz.vernjan.ctf.hv20.main():
    if sys.version_info[0] < 3:
        print("ERROR: Python3 required.")
        exit(1)
    init_number = get_args()
    print("Your B-code: {}".format(convert(init_number)))

amin()

#EOF
